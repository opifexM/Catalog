plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'io.freefair.lombok' version '8.0.1'
    id 'jacoco'
}

group = 'com.javarush.maximov'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

compileJava {
    options.release = 17
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.postgresql:postgresql'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    testImplementation 'org.glassfish:jakarta.el:5.0.0-M1'

    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    testImplementation "org.testcontainers:postgresql:1.18.0"
    testImplementation "org.testcontainers:junit-jupiter:1.18.0"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootJar {
    archiveBaseName = 'Catalog'
    archiveVersion =  '0.0.1-SNAPSHOT'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

jar {
    duplicatesStrategy = 'exclude'
    archiveFileName = "Catalog.jar"
    manifest {
        attributes 'Main-Class': 'com.javarush.maximov.catalog.App'
    }
    from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } }
}
